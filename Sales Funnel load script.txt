///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$ ###0.00;-$ ###0.00';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:Î¼;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';



///$tab Dimension Mapping
LIB CONNECT TO 'Dev_Space:Snowflake_Sales_Perfomance';

[DIM_SALESPERSON]:
LOAD  
	SALESPERSON_ACCOUNT_CODE, 
    SALESPERSON_ACCOUNT_FIRST_NAME &' '& SALESPERSON_ACCOUNT_LAST_NAME as SALES_PERSON_NAME
    ;

SELECT "SALESPERSON_ORG",
	"SALESPERSON_ACCOUNT_CODE",
	"REDUCTION_EMAIL",
	"SALESPERSON_ACCOUNT_FULL_NAME",
	"SALESPERSON_ACCOUNT_FIRST_NAME",
	"SALESPERSON_ACCOUNT_LAST_NAME",
	"SALESPERSON_DESIGNATION",
	"SALESPERSON_STATUS",
	"SALESPERSON_CLASS",
	"TENANT_ID"
FROM "MARTS"."SHARED"."DIM_SALESPERSON"
WHERE SALESPERSON_DESIGNATION = '1' AND SALESPERSON_STATUS = 'A' AND SALESPERSON_CLASS = 'P';

[DIM_EVENT_TYPES]:
LOAD  
	EVENT_TYPE_CODE, 
	EVENT_TYPE 
    ;

SELECT "EVENT_TYPES_ORG",
	"EVENT_TYPE_CODE",
	"EVENT_TYPE",
	"TENANT_ID"
FROM "MARTS"."SHARED"."DIM_EVENT_TYPES";


[DIM_SPACE_DETAILS]:
LOAD  
	SPACE_CODE, 
	SPACE_NAME 
    ;

SELECT "SPACE_DETAILS_ORG",
	"SPACE_CODE",
	"SPACE_NAME",
	"SPACE_ABBR",
	"SPACE_TYPE_CODE",
	"SPACE_MAP_URL",
	"SPACE_BASE_COMP_IND",
	"SPACE_MIN_CAPACITY",
	"SPACE_CAPACITY_AMT",
	"SPACE_ACCT_CODE",
	"SPACE_LEAD_HRS",
	"SPACE_STRIKE_HRS",
	"SPACE_UPD_STAMP",
	"TENANT_ID",
	"SPACE_NET_AREA",
	"SPACE_DETAILS_STAMP"
FROM "MARTS"."SHARED"."DIM_SPACE_DETAILS";

[DIM_SPACE_TYPES]:
LOAD SPACE_TYPE_CODE, 
	SPACE_TYPE 
    ;

SELECT "SPACE_TYPE_CODE",
	"SPACE_TYPE",
	"TENANT_ID",
	"SPACE_TYPES_STAMP"
FROM "MARTS"."SHARED"."DIM_SPACE_TYPES";
/*
[DIM_SALES_GOAL]:
LOAD SALES_GOAL_ID, 
	SALES_GOAL_ORG, 
	SALES_GOAL_FOR, 
	SALES_GOAL_TYPE_ID, 
	SALES_GOAL_EVENT_ID, 
	SALES_GOAL_REP_ACCOUNT_CODE as ACCOUNT_CODE, 
	SALES_GOAL_TOTAL_AMOUNT, 
	SALES_GOAL_START_YEAR, 
	SALES_GOAL_PERIOD_TYPE, 
	SALES_GOAL_PERIOD, 
	SALES_GOAL_TOTAL_PERIODS, 
	SALES_GOAL_START_DATE, 
	SALES_GOAL_END_DATE, 
	SALES_GOAL_SHOW_TO_TEAM, 
	SALES_GOAL_DEPARTMENT_CODE, 
	SALES_GOAL_ENTERED_STAMP, 
	SALES_GOAL_UPDATED_STAMP, 
	SALES_GOAL_ENTERED_USER, 
	SALES_GOAL_UPDATED_USER, 
	IS_TEAM_GOAL, 
	SALES_GOAL_IS_EVENT_SPECIFIC, 
	SALES_GOAL_DESCRIPTION, 
	TENANT_ID as TENANT_ID_DIM_SALESGOAL;

SELECT "SALES_GOAL_ID",
	"SALES_GOAL_ORG",
	"SALES_GOAL_FOR",
	"SALES_GOAL_TYPE_ID",
	"SALES_GOAL_EVENT_ID",
	"SALES_GOAL_REP_ACCOUNT_CODE",
	"SALES_GOAL_TOTAL_AMOUNT",
	"SALES_GOAL_START_YEAR",
	"SALES_GOAL_PERIOD_TYPE",
	"SALES_GOAL_PERIOD",
	"SALES_GOAL_TOTAL_PERIODS",
	"SALES_GOAL_START_DATE",
	"SALES_GOAL_END_DATE",
	"SALES_GOAL_SHOW_TO_TEAM",
	"SALES_GOAL_DEPARTMENT_CODE",
	"SALES_GOAL_ENTERED_STAMP",
	"SALES_GOAL_UPDATED_STAMP",
	"SALES_GOAL_ENTERED_USER",
	"SALES_GOAL_UPDATED_USER",
	"IS_TEAM_GOAL",
	"SALES_GOAL_IS_EVENT_SPECIFIC",
	"SALES_GOAL_DESCRIPTION",
	"SALES_GOAL_TYPE_DESCRIPTION",
	"TENANT_ID"
FROM "MARTS"."SHARED"."DIM_SALES_GOAL";
*/








///$tab Auto-generated section
// Mapping for Event Category Labels
EventCategoryMap:
Mapping
LOAD * INLINE [
    EV130_CATEGORY, EVENT_CATEGORY_LABEL
    1, Open
    2, Tentative
    3, Definite
    4, Lost
    5, Canceled
    6, Archived
];



// Rename conflicting data manager tables
Set dataManagerTables = '','SALES_FUNNEL_DETAILS';

For each name in $(dataManagerTables)
    Let index = 0;
    Let currentName = name; 
    Let tableNumber = TableNumber(name); 
    Let matches = 0; 
    Do while not IsNull(tableNumber) or (index > 0 and matches > 0)
        index = index + 1; 
        currentName = name & '-' & index; 
        tableNumber = TableNumber(currentName);
        matches = Match('$(currentName)', $(dataManagerTables));
    Loop 
    If index > 0 then 
        Rename Table '$(name)' to '$(currentName)'; 
    EndIf; 
Next; 

Set dataManagerTables = ;

LIB CONNECT TO [Dev_Space:Snowflake_Sales_Perfomance];

// Load FACT_EXTENDED_CHARGE table
[FACT_EXTENDED_CHARGE]:
LOAD OPPORTUNITY_ID as REV_OPP_ID, // as SEQUENCE_NUMBER, 
    OPPORTUNITY_ID & '|' & TENANT_ID as %KEY_OPP_TENANT_ID,    
	OPPORTUNITY_SALES_QUOTE_REVENUE;

SELECT "OPPORTUNITY_ID",
	"TENANT_ID",
	"SALES_QUOTE_ID",
	"OPPORTUNITY_SALES_QUOTE_REVENUE"
FROM "MARTS"."SALES_FUNNEL"."FACT_EXTENDED_CHARGE";

Tag Fields REV_OPP_ID with '$hidden';

// Load SALES_FUNNEL_DETAILS table
[SALES_FUNNEL_DETAILS]:
LOAD  
	COMPANY_NAME, 
	OPPORTUNITY_ID, 
	OPPORTUNITY_EVENT_ID, 
	OPPORTUNITY_EVENT_TYPE_CODE as EVENT_TYPE_CODE, 
	OPPORTUNITY_EVENT_STATUS_CODE, 
    Num(OPPORTUNITY_EVENT_STATUS_CODE) as OPPORTUNITY_EVENT_STATUS_CODE_NUM,
	OPPORTUNITY_LEAD_SOURCE_CODE, 
	WIN_PROB, 
	ACCOUNT_CODE as SALESPERSON_ACCOUNT_CODE, 
    ACCOUNT_CODE as ACCOUNT_CODE_FACT,
	OPPORTUNITY_NAME, 
	OPPORTUNITY_TOTAL_ATTENDANCE, 
	OPPORTUNITY_START_DATE, 
	OPPORTUNITY_END_DATE, 
	OPPORTUNITY_DATE_BOOKED, 
	OPPORTUNITY_DECISION_DATE, 
	TENANT_ID as TENANT_ID_DETAILS, 
	EXISTING_CUSTOMER, 
	TOTAL_GOAL_AMOUNT,
    SPACE_CODE,
    SPACE_TYPE_CODE,
	OPPORTUNITY_UPDATED_DATE, 
    OPPORTUNITY_ID & '|' & TENANT_ID as %KEY_OPP_TENANT_ID   
    ;

SELECT "ACCOUNT_FIRST_NAME",
	"ACCOUNT_LAST_NAME",
	"COMPANY_NAME",
	"ORGANIZATION_CODE",
	"OPPORTUNITY_ID",
	"OPPORTUNITY_EVENT_ID",
	"OPPORTUNITY_EVENT_TYPE_CODE",
	"OPPORTUNITY_EVENT_STATUS_CODE",
	"OPPORTUNITY_LEAD_SOURCE_CODE",
	"OPPORTUNITY_LOST_REASON_CODE",
	"SALESPERSON",
	"WIN_PROB",
	"ACCOUNT_CODE",
	"OPPORTUNITY_NAME",
	"OPPORTUNITY_TOTAL_ATTENDANCE",
	"ESTIMATE_REVENUE",
	"OPPORTUNITY_START_DATE",
	"OPPORTUNITY_END_DATE",
	"OPPORTUNITY_DATE_BOOKED",
	"OPPORTUNITY_DECISION_DATE",
	"TENANT_ID",
	"EXISTING_CUSTOMER",
	"TOTAL_GOAL_AMOUNT",
	"SPACE_CODE",
	"SPACE_TYPE_CODE",
	"OPPORTUNITY_UPDATED_DATE"
FROM "MARTS"."SALES_FUNNEL"."SALES_FUNNEL_DETAILS";

Tag Fields OPPORTUNITY_EVENT_STATUS_NUM,  OPPORTUNITY_LEAD_SOURCE_CODE, ACCOUNT_CODE, ACCOUNT_CODE_FACT, SPACE_CODE, 
SPACE_TYPE_CODE, OPPORTUNITY_EVENT_STATUS_CODE ,OPPORTUNITY_EVENT_STATUS_CODE_NUM, %KEY_OPP_TENANT_ID , EVENT_TYPE_CODE
with '$hidden';

// Load FACT_FUNNEL_HEALTH and map event categories
[FACT_FUNNEL_HEALTH]:
LOAD OPPORTUNITY_ID, 
	Trim(EVENT_STATUS_CATEGORY) as EVENT_STATUS_CATEGORY,
    ApplyMap('EventCategoryMap', Num(EVENT_STATUS_CATEGORY)) as STAGE, //as ev130_category_label,
    Num(Trim(EVENT_STATUS_CATEGORY)) as STAGENUM,
	STAGE_DURATION_DAYS
    WHERE Len(Trim(EVENT_STATUS_CATEGORY)) > 0 AND      // ensure not empty
    IsNum(EVENT_STATUS_CATEGORY) AND              // ensure numeric
    Match(Num(Trim(EVENT_STATUS_CATEGORY)), 1, 2, 3, 4, 5, 6) AND
    NOT IsNull(OPPORTUNITY_ID);             // ensure sequence number is valid;

SELECT "OPPORTUNITY_ID",
	"EVENT_STATUS_CATEGORY",
	"OPPORTUNITY_PREVIOUS_STATUS",
	"OPPORTUNITY_CURRENT_STATUS",
	"OPPORTUNITY_STATUS_CHANGE_STAMP",
	"OPPORTUNITY_ENT_STAMP",
	"AUDIT_OPPORTUNITY_ID",
	"TENANT_ID",
	"STAGE_DURATION_DAYS"
FROM "MARTS"."SALES_FUNNEL"."FACT_FUNNEL_HEALTH";

Tag Fields EVENT_STATUS_CATEGORY, STAGENUM with '$hidden';

[DATA_FRESHNESS_LOG]:
LOAD  
	UPDATED_AT_UTC, 
    ;

SELECT "DATABASE_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"UPDATED_AT_UTC",
	"DBT_RUN_ID",
	"RUN_BY_MODEL"
FROM "MARTS"."SHARED"."DATA_FRESHNESS_LOG"
WHERE SCHEMA_NAME='sales_funnel';




// Step 1: Max stage per SEQUENCE_NUMBER
STAGE_MAX_STAGE:
LOAD 
    OPPORTUNITY_ID,
    Max(STAGENUM) as MaxStage
RESIDENT FACT_FUNNEL_HEALTH
GROUP BY OPPORTUNITY_ID;

// Step 2: Stage progression base
STAGE_PROGRESSION_BASE:
LOAD 
    OPPORTUNITY_ID,
    STAGENUM as CurrentStage
RESIDENT FACT_FUNNEL_HEALTH
WHERE NOT IsNull(STAGENUM);

// Step 3: Join MaxStage
INNER JOIN (STAGE_PROGRESSION_BASE)
LOAD 
    OPPORTUNITY_ID,
    MaxStage
RESIDENT STAGE_MAX_STAGE;

// Step 4: Final progression table with HasNextStage flag
STAGE_PROGRESSION_FINAL:
LOAD 
    OPPORTUNITY_ID,
    CurrentStage,
    If(CurrentStage < MaxStage, 1, 0) as HasNextStage
RESIDENT STAGE_PROGRESSION_BASE;

Tag Fields CurrentStage, HasNextStage with '$hidden';

// Clean up intermediate table
DROP TABLE STAGE_PROGRESSION_BASE;



// Step 5: Conversion aggregation
/*STAGE_CONVERSION:
LOAD 
    CurrentStage as StageNum,
    Count(DISTINCT SEQUENCE_NUMBER) as OpportunitiesInStage,
    Count(DISTINCT If(HasNextStage = 1, SEQUENCE_NUMBER)) as OpportunitiesMovedNext,
    Round(
        Count(DISTINCT If(HasNextStage = 1, SEQUENCE_NUMBER)) 
        / Count(DISTINCT SEQUENCE_NUMBER),
        0.001
    ) * 100 as StageConversionPercent
RESIDENT STAGE_PROGRESSION_FINAL
GROUP BY CurrentStage;*/



DROP TABLE STAGE_MAX_STAGE;



// Drop final intermediate table
//DROP TABLE STAGE_PROGRESSION_FINAL;





// AutoCalendar script unchanged...
[autoCalendar]: 
  DECLARE FIELD DEFINITION Tagged ('$date')
FIELDS
  Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
  Month($1) AS [Month] Tagged ('$month', '$cyclic'),
  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
  Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
  Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),
  If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,
  Year(Today())-Year($1) AS [YearsAgo] ,
  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,
  4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,
  Ceil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,
  If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,
  12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,
  Month(Today())-Month($1) AS [MonthRelNo] ,
  If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,
  (WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,
  Week(Today())-Week($1) AS [WeekRelNo] ;

/*DERIVE FIELDS FROM FIELDS [MEETING_START_DATE], 
[MEETING_END_DATE], [DATE_BOOKED], [DECISION_DATE], [LAST_ACTIVITY_DATE], [DATE_REFRESHED] 
USING [autoCalendar] ;*/
///$tab Master Calendar Start Date
QuarterMap:
Mapping Load
RowNo() as Month,
'Q' & Ceil(RowNo()/3) as Quarter
AutoGenerate 12;



MinMaxDates:
Load 
min(Date(OPPORTUNITY_START_DATE ,'M/D/YYYY'))                                as minDate,
max(Date(OPPORTUNITY_START_DATE ,'M/D/YYYY'))                                as maxDate
Resident SALES_FUNNEL_DETAILS;

Let vMinDate = num(Peek('minDate',0,'MinMaxDates'));
Let vMaxDate = num(Peek('maxDate',0,'MinMaxDates'));
Drop Table MinMaxDates;


TempCalendar:

Load 
$(vMinDate) + IterNo() as Num,
Date($(vMinDate)+IterNo()-1) as TempDate
AutoGenerate 1 while $(vMinDate) + IterNo()-1 <= $(vMaxDate);

MasterCalendar_STARTDATE:
Load
Date(Floor(TempDate),'M/D/YYYY') as OPPORTUNITY_START_DATE,
//Date(TempDate,'M/D/YYYY') as OPPORTUNITY_START_DATE,
Date(Floor(TempDate),'M/D/YYYY') as START_DATE,
Week(TempDate) as START_WEEK,
Year(TempDate) as START_YEAR,
//Month(TempDate) as Start_Month,
Dual(Month(TempDate), Month(TempDate)) as START_MONTH,
Date(monthstart(TempDate), 'MMM YYYY') as START_MONTHYEAR,
ApplyMap('QuarterMap',Month(TempDate),Null()) AS START_QUARTER

Resident TempCalendar
Order by TempDate asc;
Drop Table TempCalendar;

Tag Field START_DATE with '$hidden','$date';


///$tab Master Calendar End Date
QuarterMap:
Mapping Load
RowNo() as Month,
'Q' & Ceil(RowNo()/3) as Quarter
AutoGenerate 12;



MinMaxDates:
Load 
min(Date(OPPORTUNITY_END_DATE ,'M/D/YYYY'))                                as minDate,
max(Date(OPPORTUNITY_END_DATE ,'M/D/YYYY'))                                as maxDate
Resident SALES_FUNNEL_DETAILS;

Let vMinDate = num(Peek('minDate',0,'MinMaxDates'));
Let vMaxDate = num(Peek('maxDate',0,'MinMaxDates'));
Drop Table MinMaxDates;


TempCalendar:

Load 
$(vMinDate) + IterNo() as Num,
Date($(vMinDate)+IterNo()-1) as TempDate
AutoGenerate 1 while $(vMinDate) + IterNo()-1 <= $(vMaxDate);

MasterCalendar_ENDDATE:
Load
Date(Floor(TempDate),'M/D/YYYY') as OPPORTUNITY_END_DATE,
//Date(TempDate,'M/D/YYYY') as OPPORTUNITY_END_DATE,
Date(Floor(TempDate),'M/D/YYYY') as END_DATE,
Week(TempDate) as END_WEEK,
Year(TempDate) as END_YEAR,
Dual(Month(TempDate), Month(TempDate)) as END_MONTH,
Date(monthstart(TempDate), 'MMM YYYY') as END_MONTHYEAR,
ApplyMap('QuarterMap',Month(TempDate),Null()) AS END_QUARTER

Resident TempCalendar
Order by TempDate asc;
Drop Table TempCalendar;

Tag Field END_DATE with '$hidden','$date';
