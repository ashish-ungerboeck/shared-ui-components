///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$ ###0.00;-$ ###0.00';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:Î¼;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

Let vStartDate=Num(Date(yearstart(AddYears(Today(),-58))));

Let vEndDate=Num(Date(yearend(AddYears(Today(), +1))));
///$tab Section Access

// ====================================================================
// SAFER Partial Reload for Section Access
// Place this entire block at the VERY TOP of your load script.
// ====================================================================
 
IF IsPartialReload() THEN
 
  SECTION ACCESS;
 
  // Use 'REPLACE' to completely swap the security table.
  // This ensures deleted users or changed permissions are handled correctly.
  REPLACE LOAD Trim(Upper(ACCESS)) as ACCESS,
      Trim(UPPER([USER.EMAIL])) as USER.EMAIL,
      Trim(UPPER(REDUCTION_EMAIL)) as REDUCTION_EMAIL;
  LIB CONNECT TO 'Dev_Space:Azure_SQL_Database_User_Info';
  SELECT ACCESS,
      "USER.EMAIL",
      "REDUCTION_EMAIL"
  FROM "intghub-dev".IntegrationHub.QlikUserGroupInfo;
  // This EXIT SCRIPT is vital. It stops the script from running further.
  EXIT SCRIPT;
 
ENDIF
 
 
// ====================================================================
// Your original, full reload script continues below, unchanged.
// ====================================================================
 
SECTION ACCESS;
 
LIB CONNECT TO 'Dev_Space:Azure_SQL_Database_User_Info';
 
[QlikUserGroupInfo]:
LOAD Trim(Upper(ACCESS)) as ACCESS,  
	Trim(UPPER([USER.EMAIL])) as USER.EMAIL, 
	Trim(UPPER(REDUCTION_EMAIL)) as REDUCTION_EMAIL ;  
SELECT ACCESS,
	"USER.EMAIL",
	"REDUCTION_EMAIL"
FROM "intghub-dev".IntegrationHub.QlikUserGroupInfo;
 
SECTION APPLICATION;


///$tab Auto-generated section
Set dataManagerTables = '','REVENUE_TRENDS_DETAILS','DIM_MARKET_SEGMENTS';
//This block renames script tables from non generated section which conflict with the names of managed tables

For each name in $(dataManagerTables) 
    Let index = 0;
    Let currentName = name; 
    Let tableNumber = TableNumber(name); 
    Let matches = 0; 
    Do while not IsNull(tableNumber) or (index > 0 and matches > 0)
        index = index + 1; 
        currentName = name & '-' & index; 
        tableNumber = TableNumber(currentName) 
        matches = Match('$(currentName)', $(dataManagerTables));
    Loop 
    If index > 0 then 
            Rename Table '$(name)' to '$(currentName)'; 
    EndIf; 
Next; 
Set dataManagerTables = ;


Unqualify *;

LIB CONNECT TO [Dev_Space:Snowflake_Sales_Perfomance];

[REVENUE_TRENDS_DETAILS]:
LOAD
	DEPARTMENT_CODE,
	PHASE, 
	TENANT_ID, 	
    Trim(UPPER(REDUCTION_EMAIL)) as REDUCTION_EMAIL,
	EVENT_NAME, 
	EVENT_START_DATE, 
	EVENT_END_DATE, 
    EVENT_TYPE_CODE,
	MARKET_SEGMENT, 
	SPACE_CODE, 
	SPACE_TYPE_CODE, 	 
	REVENUE_AMOUNT
    Where Num(EVENT_START_DATE)>=$(vStartDate) and Num(EVENT_START_DATE)<=$(vEndDate);



SELECT "DEPARTMENT_CODE",
	"PHASE",
	"TENANT_ID",
    "REDUCTION_EMAIL",
	"EVENT_NAME",
	"EVENT_START_DATE",
	"EVENT_END_DATE",
	"EVENT_TYPE_CODE",
	"MARKET_SEGMENT",
	"SPACE_CODE",
	"SPACE_TYPE_CODE",
	"REVENUE_AMOUNT"
FROM "MARTS"."REVENUE_TRENDS"."REVENUE_TRENDS_DETAILS";

Tag Fields DEPARTMENT_CODE, SPACE_CODE, SPACE_TYPE_CODE, EVENT_TYPE_CODE, REDUCTION_EMAIL with '$hidden';

[DATA_FRESHNESS_LOG]:
LOAD 
	UPDATED_AT_UTC, 
    ;

SELECT "DATABASE_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"UPDATED_AT_UTC",
	"DBT_RUN_ID",
	"RUN_BY_MODEL"
FROM "MARTS"."SHARED"."DATA_FRESHNESS_LOG"
WHERE SCHEMA_NAME='revenue_trends';


[autoCalendar]: 
  DECLARE FIELD DEFINITION Tagged ('$date')
FIELDS
  Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
  Month($1) AS [Month] Tagged ('$month', '$cyclic'),
  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
  Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
  Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),
  If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,
  Year(Today())-Year($1) AS [YearsAgo] ,
  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,
  4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,
  Ceil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,
  If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,
  12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,
  Month(Today())-Month($1) AS [MonthRelNo] ,
  If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,
  (WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,
  Week(Today())-Week($1) AS [WeekRelNo] ;

DERIVE FIELDS FROM FIELDS [START_DATE], [END_DATE], [CRPRE_ENT_STAMP], [CRPRE_UPD_STAMP] USING [autoCalendar] ;
///$tab Dimension Mapping
LIB CONNECT TO [Dev_Space:Snowflake_Sales_Perfomance];

[DIM_MARKET_SEGMENTS]:
LOAD  
	MARKET_SEGMENT, 
    ;

SELECT "MAJOR_SEGMENT_CODE",
	"MINOR_SEGMENT_CODE",
	"MARKET_SEGMENT",
	"MARKET_SEGMENT_UOM",
	"MARKET_SEGMENT_ENT_STAMP",
	"MARKET_SEGMENT_USER_ID",
	"MARKET_SEGMENT_UPD_STAMP",
	"MARKET_SEGMENT_UPD_USER_ID",
	"MARKET_SEGMENT_CAT_CODE",
	"MARKET_SEGMENT_CATEGORY",
	"MARKET_SEGMENT_CLASS",
	"MARKET_SEGMENT_GROUP",
	"TENANT_ID",
	"MARKET_SEGMENTS_STAMP"
FROM "MARTS"."SHARED"."DIM_MARKET_SEGMENTS";

[DIM_EVENT_TYPES]:
LOAD  
	EVENT_TYPE_CODE, 
	EVENT_TYPE; 

SELECT "EVENT_TYPES_ORG",
	"EVENT_TYPE_CODE",
	"EVENT_TYPE",
	"TENANT_ID"
FROM "MARTS"."SHARED"."DIM_EVENT_TYPES";

[DIM_SPACE_DETAILS]:
LOAD 
	SPACE_CODE, 
	SPACE_NAME 
    ;

SELECT "SPACE_DETAILS_ORG",
	"SPACE_CODE",
	"SPACE_NAME",
	"SPACE_ABBR",
	"SPACE_TYPE_CODE",
	"SPACE_MAP_URL",
	"SPACE_BASE_COMP_IND",
	"SPACE_MIN_CAPACITY",
	"SPACE_CAPACITY_AMT",
	"SPACE_ACCT_CODE",
	"SPACE_LEAD_HRS",
	"SPACE_STRIKE_HRS",
	"SPACE_UPD_STAMP",
	"TENANT_ID",
	"SPACE_NET_AREA",
	"SPACE_DETAILS_STAMP"
FROM "MARTS"."SHARED"."DIM_SPACE_DETAILS";


[DIM_REVENUE_ELEMENT]:
LOAD  
	DEPARTMENT_CODE, 
	REVENUE_ELEMENT_NAME
    ;

SELECT "REVENUE_ELEMENT_ORG",
	"DEPARTMENT_CODE",
	"REVENUE_ELEMENT_NAME",
	"REVENUE_ELEMENT_STATUS",
	"REVENUE_ELEMENT_UPD_STAMP",
	"TENANT_ID",
	"REVENUE_ELEMENT_STAMP"
FROM "MARTS"."SHARED"."DIM_REVENUE_ELEMENT";





///$tab Master Calendar Start Date
QuarterMap:
Mapping Load
RowNo() as Month,
'Q' & Ceil(RowNo()/3) as Quarter
AutoGenerate 12;



MinMaxDates:
Load 
min(Date(EVENT_START_DATE ,'M/D/YYYY'))                                as minDate,
max(Date(EVENT_START_DATE ,'M/D/YYYY'))                                as maxDate
Resident REVENUE_TRENDS_DETAILS;

Let vMinDate = num(Peek('minDate',0,'MinMaxDates'));
Let vMaxDate = num(Peek('maxDate',0,'MinMaxDates'));
Drop Table MinMaxDates;


TempCalendar:

Load 
$(vMinDate) + IterNo() as Num,
Date($(vMinDate)+IterNo()-1) as TempDate
AutoGenerate 1 while $(vMinDate) + IterNo()-1 <= $(vMaxDate);

MasterCalendar_STARTDATE:
Load
Date(TempDate,'M/D/YYYY') as EVENT_START_DATE,
//Date(Floor(TempDate),'M/D/YYYY') as START_DATEONLY,
Date(Floor(TempDate),'M/D/YYYY') as START_DATE,
Week(TempDate) as START_WEEK,
Year(TempDate) as START_YEAR,
//Month(TempDate) as Start_Month,
Dual(Month(TempDate), Month(TempDate)) as START_MONTH,
Date(monthstart(TempDate), 'MMM YYYY') as START_MONTHYEAR,
ApplyMap('QuarterMap',Month(TempDate),Null()) AS START_QUARTER

Resident TempCalendar
Order by TempDate asc;
Drop Table TempCalendar;
Tag Field EVENT_START_DATE with  '$date','$hidden';
//Tag Field START_DATEONLY with '$date';
Tag Field START_DATE with  '$date';
///$tab Master Calendar End Date
QuarterMap:
Mapping Load
RowNo() as Month,
'Q' & Ceil(RowNo()/3) as Quarter
AutoGenerate 12;



MinMaxDates:
Load 
min(Date(EVENT_END_DATE ,'M/D/YYYY'))                                as minDate,
max(Date(EVENT_END_DATE ,'M/D/YYYY'))                                as maxDate
Resident REVENUE_TRENDS_DETAILS;

Let vMinDate = num(Peek('minDate',0,'MinMaxDates'));
Let vMaxDate = num(Peek('maxDate',0,'MinMaxDates'));
Drop Table MinMaxDates;


TempCalendar:

Load 
$(vMinDate) + IterNo() as Num,
Date($(vMinDate)+IterNo()-1) as TempDate
AutoGenerate 1 while $(vMinDate) + IterNo()-1 <= $(vMaxDate);

MasterCalendar_ENDDATE:
Load
Date(TempDate,'M/D/YYYY') as EVENT_END_DATE,
//Date(Floor(TempDate),'M/D/YYYY') as END_DATEONLY,
Date(Floor(TempDate),'M/D/YYYY') as END_DATE,
Week(TempDate) as END_WEEK,
Year(TempDate) as END_YEAR,
//Month(TempDate) as End_Month,
Dual(Month(TempDate), Month(TempDate)) as END_MONTH,
Date(monthstart(TempDate), 'MMM YYYY') as END_MONTHYEAR,
ApplyMap('QuarterMap',Month(TempDate),Null()) AS END_QUARTER

Resident TempCalendar
Order by TempDate asc;
Drop Table TempCalendar;

Tag Field EVENT_END_DATE with  '$date','$hidden';
//Tag Field END_DATEONLY with '$date';
Tag Field END_DATE with '$date';

